/*
Copyright IBM Corp. 2016 All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

		 http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package protos;

import "google/protobuf/timestamp.proto";

// A Header contains fields that are common to all proposals and all
// transactions, no matter their type.  It can include also type-dependant
// fields by using the 'extensions' field.  This header is on purpose the same
// header for proposals (a request to do "something" on the ledger) and a
// transaction (the endorsed actions following from some request).
// Furthermore, a proposal, its endorsements and the resulting transaction are
// linked together by this message, as follows
// 1. a Proposal contains a Header
// 2. the hash of the Header of a proposal is included in the proposal response
//    generated by each endorser as a result of that proposal
// 3. a TransactionAction contains both i) the *same* Header (byte-by-byte) of
//    the corresponsing Proposal and ii) the hash of the Header in each of the
//    endorsed actions
message Header {

	enum Type {
		UNDEFINED = 0;
		CHAINCODE = 1;
	}

	// Version indicates message protocol version
	int32 version = 1;

	// Timestamp is the local time when the message was created
	// by the sender
	google.protobuf.Timestamp timestamp = 2;

	// Type of the transaction
	Type type = 3;

	// Creator of the header (and encapsulating message). This is usually a tcert
	// or ecert identifying the entity who submits the proposal/transaction.  The
	// creator identifies the signer of
	// 1. a proposal (if this is the header of a Proposal message)
	// 2. a transaction (if this is the header of a TransactionAction message)
	bytes creator = 4;

	// Arbitrary number that may only be used once. This ensures the hash of
	// the proposal is unique and may be used in replay detection
	bytes nonce = 5;

	// Identifier of the chain this header targets to
	bytes chainID = 6;

	// Extensions is used to include type-dependant fields
	bytes extensions = 7;
}
